
RoboMapache.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000116  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e1  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000634  00000000  00000000  000008a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000283  00000000  00000000  00000ed5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001158  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037e  00000000  00000000  000011ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006f  00000000  00000000  0000152a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001599  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 40 00 	jmp	0x80	; 0x80 <__vector_18>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  78:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <__vector_18>:
	
}

ISR(USART_RX_vect,ISR_NAKED){
	char dato;
	dato = UDR0; //Dato-comando recibido de 8 bits
  80:	e6 ec       	ldi	r30, 0xC6	; 198
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
	UDR0 = dato; //Echo, es decir regresa el valor que le mandemos
  86:	80 83       	st	Z, r24
	//Codigo para controlar el giro de las llantas del robot
	switch(dato){
  88:	84 36       	cpi	r24, 0x64	; 100
  8a:	89 f0       	breq	.+34     	; 0xae <__vector_18+0x2e>
  8c:	18 f4       	brcc	.+6      	; 0x94 <__vector_18+0x14>
  8e:	81 36       	cpi	r24, 0x61	; 97
  90:	59 f0       	breq	.+22     	; 0xa8 <__vector_18+0x28>
  92:	10 c0       	rjmp	.+32     	; 0xb4 <__vector_18+0x34>
  94:	83 37       	cpi	r24, 0x73	; 115
  96:	29 f0       	breq	.+10     	; 0xa2 <__vector_18+0x22>
  98:	87 37       	cpi	r24, 0x77	; 119
  9a:	61 f4       	brne	.+24     	; 0xb4 <__vector_18+0x34>
		case 'w':
		PORTC = 0b001010; //Avanza hacia adelante
  9c:	8a e0       	ldi	r24, 0x0A	; 10
  9e:	88 b9       	out	0x08, r24	; 8
		break;
  a0:	0a c0       	rjmp	.+20     	; 0xb6 <__vector_18+0x36>
		case 's':
		PORTC = 0b000101; //Avanza hacia atrás
  a2:	85 e0       	ldi	r24, 0x05	; 5
  a4:	88 b9       	out	0x08, r24	; 8
		break;
  a6:	07 c0       	rjmp	.+14     	; 0xb6 <__vector_18+0x36>
		case 'a':
		PORTC = 0b001000; //Gira a la derecha
  a8:	88 e0       	ldi	r24, 0x08	; 8
  aa:	88 b9       	out	0x08, r24	; 8
		break;
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <__vector_18+0x36>
		case 'd':
		PORTC = 0b000010; //Gira a la izquierda
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	88 b9       	out	0x08, r24	; 8
		break;
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <__vector_18+0x36>
		default:
		PORTC = 0b000000; //Cualquier tecla diferente de las opciones anteriores lo detiene
  b4:	18 b8       	out	0x08, r1	; 8
	}
	reti(); //Regresa a la interrupción y limpia las banderas de interrupción
  b6:	18 95       	reti

000000b8 <main>:
}

int main(void){}
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	08 95       	ret

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
